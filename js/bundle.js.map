{"version":3,"sources":["webpack/bootstrap dc2aab3e9918e9aba88b","./js/main.js","./js/snake-view.js","./js/snake.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA;AACA;AACA;AACA,EAAC;;;;;;;ACLD;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;;AAEA,kBAAiB,qBAAqB;AACtC;AACA,oBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;;;;;;;AClEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAiB,8BAA8B;AAC/C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,kBAAiB,UAAU;AAC3B;AACA,oBAAmB,UAAU;AAC7B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAG;;AAEH;;AAEA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/js/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap dc2aab3e9918e9aba88b\n **/","var SnakeView = require('./snake-view');\n\n$(function () {\n  var rootEl = $('.snake-game');\n  new SnakeView(rootEl);\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/main.js\n ** module id = 0\n ** module chunks = 0\n **/","var Board = require('./snake.js');\n\nvar View = function ($el) {\n  this.$el = $el;\n\n  this.board = new Board(20);\n  this.setupGrid();\n\n  this.interval = window.setInterval(this.step.bind(this), 100);\n\n  $(window).on(\"keydown\", this.handleKeyEvent.bind(this));\n};\n\nView.KEYS = {\n  38: \"N\",\n  39: \"E\",\n  40: \"S\",\n  37: \"W\"\n};\n\nView.prototype.handleKeyEvent = function (event) {\n  var direction = View.KEYS[event.keyCode];\n  if (direction) {\n    this.board.snake.turn(direction);\n  }\n};\n\nView.prototype.render = function () {\n  this.updateClasses(this.board.snake.segments, \"snake\");\n  this.updateClasses([this.board.apple.position], \"apple\");\n};\n\nView.prototype.updateClasses = function (coordinates, className) {\n  this.$li.filter(\".\" + className).removeClass();\n\n  coordinates.forEach( function (coordinate) {\n    var flatCoordinate = (coordinate.a * this.board.size) + coordinate.b;\n    this.$li.eq(flatCoordinate).addClass(className);\n  }.bind(this));\n};\n\nView.prototype.setupGrid = function () {\n  var html = \"\";\n\n  for (var i = 0; i < this.board.size; i++) {\n    html += \"<ul>\";\n    for (var j = 0; j < this.board.size; j++) {\n      html += \"<li></li>\";\n    }\n    html += \"</ul>\";\n  }\n\n  this.$el.html(html);\n  this.$li = this.$el.find(\"li\");\n};\n\nView.prototype.step = function () {\n  if (this.board.snake.segments.length > 0) {\n    this.board.snake.move();\n    this.render();\n  } else {\n    alert(\"You lose!\");\n    window.clearInterval(this.interval);\n  }\n};\n\nmodule.exports = View;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/snake-view.js\n ** module id = 1\n ** module chunks = 0\n **/","var Coordinate = function (a, b) {\n  this.a = a;\n  this.b = b;\n};\n\nCoordinate.prototype.isOpposite = function (coordinate) {\n  return (this.a === (-1 * coordinate.a) && this.b === (-1 * coordinate.b));\n};\n\nCoordinate.prototype.plus = function (coordinate) {\n  return new Coordinate(this.a + coordinate.a, this.b + coordinate.b);\n};\n\nCoordinate.prototype.equals = function (coordinate) {\n  return (this.a === coordinate.a) && (this.b === coordinate.b);\n};\n\nvar Apple = function (board) {\n  this.board = board;\n  this.replace();\n};\n\nApple.SYMBOL = \"A\";\n\nApple.prototype.replace = function () {\n  var x = Math.floor(Math.random() * this.board.size);\n  var y = Math.floor(Math.random() * this.board.size);\n\n  while (this.board.snake.isOccupying([x, y])) {\n    x = Math.floor(Math.random() * this.board.size);\n    y = Math.floor(Math.random() * this.board.size);\n  }\n\n  this.position = new Coordinate(x, y);\n};\n\nvar Snake = function (board) {\n  this.direction = \"N\";\n  this.turning = false;\n  this.board = board;\n\n  var center =\n    new Coordinate(Math.floor(board.size/2), Math.floor(board.size/2));\n  this.segments = [center];\n\n  this.growTurns = 0;\n};\n\nSnake.DIFFERENCE = {\n  \"N\": new Coordinate(-1, 0),\n  \"S\": new Coordinate(1, 0),\n  \"E\": new Coordinate(0, 1),\n  \"W\": new Coordinate(0, -1)\n};\n\nSnake.SYMBOL = \"S\";\nSnake.GROW_TURNS = 3;\n\nSnake.prototype.eatApple = function () {\n  if (this.head().equals(this.board.apple.position)) {\n    this.growTurns += Snake.GROW_TURNS;\n    return true;\n  } else {\n    return false;\n  }\n};\n\nSnake.prototype.isOccupying = function (array) {\n  var result = false;\n  this.segments.forEach( function (segment) {\n    if (segment.a === array[0] && segment.b === array[1]) {\n      result = true;\n      return result;\n    }\n  });\n  return result;\n};\n\nSnake.prototype.head = function () {\n  var last = this.segments.length - 1;\n  return this.segments[last];\n};\n\nSnake.prototype.isValid = function () {\n  var head = this.head();\n\n  if (!this.board.validPosition(this.head())) {\n    return false;\n  }\n\n  for (var i = 0; i < this.segments.length - 1; i++) {\n    if (this.segments[i].equals(head)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nSnake.prototype.move = function () {\n  // Move snake forward by adding a new segment in the direction the snake\n  // is traveling in.\n  var newSegment = this.head().plus(Snake.DIFFERENCE[this.direction]);\n  this.segments.push(newSegment);\n\n  // Allow snake to turn again\n  this.turning = false;\n\n  // Check for contact with apple\n  if (this.eatApple()) {\n    this.board.apple.replace();\n  }\n\n  // Remove tail segment if not growing\n  if (this.growTurns > 0) {\n    this.growTurns -= 1;\n  } else {\n    this.segments.shift();\n  }\n\n  // Destroy snake if collides with wall or self\n  if (!this.isValid()) {\n    this.segments = [];\n  }\n};\n\nSnake.prototype.turn = function (direction) {\n  if (\n    Snake.DIFFERENCE[this.direction].isOpposite(Snake.DIFFERENCE[direction]) ||\n    this.turning\n  ) {\n    return;\n  } else {\n    this.turning = true;\n    this.direction = direction;\n  }\n};\n\nvar Board = function (size) {\n  this.size = size;\n\n  this.snake = new Snake(this);\n  this.apple = new Apple(this);\n};\n\nBoard.BLANK_SYMBOL = \".\";\n\nBoard.blankGrid = function (size) {\n  var grid = [];\n\n  for (var i = 0; i < size; i++) {\n    var row = [];\n    for (var j = 0; j < size; j++) {\n      row.push(Board.BLANK_SYMBOL);\n    }\n    grid.push(row);\n  }\n\n  return grid;\n};\n\nBoard.prototype.render = function () {\n  var grid = Board.blankGrid(this.size);\n\n  this.snake.segments.forEach( function (segment) {\n    grid[segment.a][segment.b] = Snake.SYMBOL;\n  });\n\n  grid[this.apple.position.a][this.apple.position.b] = Apple.SYMBOL;\n\n  var rowStrs = [];\n  grid.map( function (row) {\n    return row.join(\"\");\n  }).join(\"\\n\");\n};\n\nBoard.prototype.validPosition = function (coordinate) {\n  return (\n    (coordinate.a >= 0) &&\n    (coordinate.a < this.size) &&\n    (coordinate.b >= 0) &&\n    (coordinate.b < this.size)\n  );\n};\n\nmodule.exports = Board;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/snake.js\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}